apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'kotlin-allopen'

apply plugin: 'jacoco'

apply plugin: 'org.sonarqube'


android {
    compileSdkVersion build_versions.target_sdk
    defaultConfig {
        applicationId "com.example.android.writeitsayithearit"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.example.android.writeitsayithearit.WriteItSayItHearItRunner"
        multiDexEnabled true

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        debug{
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    dataBinding {
        enabled = true
    }

}

allOpen {
    // allows classes to be extended in debug build
    annotation 'com.example.android.writeitsayithearit.test.OpenClass'
}

jacoco {
    toolVersion "0.8.3"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport' // generates coverage report for instrumentation tests
    dependsOn 'testDebugUnitTest' // generates coverage reports of unit tests (raw data only)

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // Files to exclude from coverage report
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component*.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*Module*.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']

    // Location of generated class files
    def javaClasses = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([javaClasses], [kotlinClasses])

    // combines the results of the unit tests and instrumentation tests
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/**/*.ec"
    ])
}

sonarqube {
    properties {
        property "sonar.projectName", "WriteItSayItHearIt"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "./build/reports/jacoco/fullCoverageReport/fullCoverageReport.xml" //link to xml file that generated by jacoco

        // exclude the dependency injection package
        property "sonar.exclusions", "**/di/**"

    }
}
project.tasks["sonarqube"].dependsOn "fullCoverageReport"

dependencies {

    /* Production dependencies: */
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps.kotlin.stdlib

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Timber for logging
    implementation deps.timber

    // support
    implementation deps.support.app_compat
    implementation deps.support.ktx
    implementation deps.support.constraint_layout
    implementation deps.material_support

    // dagger
    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support

    // navigation
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui_ktx

    // lifecycle
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions

    // room
    implementation deps.room.runtime

    // annotation processors
    kapt deps.dagger.android_support_compiler
    kapt deps.dagger.compiler
    kapt deps.room.compiler

    /* Unit test dependencies: */

    testImplementation deps.test_ext.junit
    testImplementation deps.robolectric
    testImplementation deps.mockk

    /* Instrumented test dependencies: */
    androidTestImplementation deps.support.test
    androidTestImplementation deps.test_ext.junit
    androidTestImplementation deps.test_ext.truth
    androidTestImplementation deps.mockk_android

    // dagger
    androidTestImplementation deps.dagger.runtime
    androidTestImplementation deps.dagger.android
    androidTestImplementation deps.dagger.android_support

    /* Debug dependencies */
    debugImplementation deps.test_ext.truth
    debugImplementation deps.espresso.core
    debugImplementation deps.espresso.contrib
    debugImplementation deps.arch_core.testing
    debugImplementation deps.fragment_test

    androidTestUtil deps.orchestrator

}

